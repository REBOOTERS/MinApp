plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'dep-extract'
    id 'kotlin-kapt'
}

def ext = rootProject.ext

android {
    compileSdk ext.compileSdkVersion

    defaultConfig {
        applicationId "com.engineer.android.mini"
        minSdk ext.minSdkVersion
        targetSdk ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs 'zh-rCN', 'xxhdpi'

        ndk {
            abiFilters 'arm64-v8a'
        }
    }

    signingConfigs {
        release {
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
        }
    }

    buildTypes {
        release {
            //混淆
            minifyEnabled true
            //所以尽可能的减少第三方的使用 也是可以降低混淆的难度
            //Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }

    sourceSets {
        main {
//            aidl.srcDirs = ['src/main/aidl']
        }
    }
    flavorDimensions "channel", "type"
    productFlavors {
        xiaomi {
            dimension "channel"
        }
        oppo {
            dimension "channel"
        }
        huawei {
            dimension "channel"
        }

        global {
            dimension "type"
        }
        local {
            dimension "type"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])


    implementation "androidx.appcompat:appcompat:$appcompat"
    implementation "androidx.core:core-ktx:$core_ktx"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation "com.google.android.material:material:$material"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'com.github.bumptech.glide:glide:4.13.1'
    implementation 'androidx.preference:preference-ktx:1.1.1'

    implementation 'com.facebook.stetho:stetho:1.6.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.6.0'

    implementation 'com.github.z-chu.RxCache:rxcache:2.3.5'
    implementation 'com.github.z-chu.RxCache:rxcache-kotlin:2.3.5'

    implementation project(path: ':thirdlib')
    implementation project(path: ':compose')

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'

    implementation "com.google.android:flexbox:1.0.0"

    implementation 'com.alibaba:fastjson:1.1.72.android'
    implementation 'org.jetbrains.kotlin:kotlin-script-runtime:1.6.21'

//    implementation 'com.facebook.shimmer:shimmer:0.6.0'

//    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

apply from: file("../custom-gradle/test-dep.gradle") // unit test
apply from: file("../custom-gradle/res-guard.gradle") // res-guard
apply from: file("../custom-gradle/viewmodel-dep.gradle") // view-model-lifecycle 全家桶
apply from: file("../custom-gradle/coroutines-dep.gradle") // kotlin coroutines
apply from: file("../custom-gradle/rx-retrofit-dep.gradle") // rxjava retrofit gson 网络全家桶
apply from: file("../custom-gradle/hilt-dep.gradle") // hilt 全家桶
apply from: file("../custom-gradle/media.gradle") // media lib