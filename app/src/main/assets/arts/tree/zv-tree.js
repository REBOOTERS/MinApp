var ZVTree;(()=>{"use strict";var t={d:(i,n)=>{for(var e in n)t.o(n,e)&&!t.o(i,e)&&Object.defineProperty(i,e,{enumerable:!0,get:n[e]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},i={};t.r(i),t.d(i,{draw:()=>r});const n=Math.PI/2;class e{constructor(t,i,n,e,s,r,a,o,l,c,b,g,p,d){this.x=t,this.y=i,this.r=n,this.a=e,this.stepSize=s,this.branchProb=c,this.one=r,this.Q=[new h(t,i,n,e,0,a,p,b,d,g,l,o)]}step(){for(let t=this.Q.length-1;t>=0;--t){const i=this.Q[t];if(i.step(this.one,this.r,this.stepSize),i.r<=this.one)this.Q.splice(t,1);else if(Math.random()<this.r-i.r+this.branchProb){const t=2*Math.random()-1;this.Q.push(new h(i.x,i.y,i.r*i.branchSplitDiminish,i.a+t*i.branchSplitAngle,i.g+1,i.scale,i.branchAngleMax,i.branchDiminish,i.branchAngleExp,i.branchSplitDiminish,i.branchSplitAngle,i.grains))}}}draw(t){for(const i of this.Q)i.draw(t)}}class h{constructor(t,i,n,e,h,s,r,a,o,l,c,b){this.x=t,this.y=i,this.r=n,this.a=e,this.g=h,this.scale=s,this.branchAngleMax=r,this.branchDiminish=a,this.branchAngleExp=o,this.branchSplitDiminish=l,this.branchSplitAngle=c,this.grains=b}step(t,i,n){this.r-=this.branchDiminish,this.x+=Math.cos(this.a)*n,this.y+=Math.sin(this.a)*n;const e=Math.pow(1+(t+i-this.r)/i,this.branchAngleExp);this.a+=e*(()=>{const t=1-Math.random(),i=1-Math.random();return Math.sqrt(-2*Math.log(t))*Math.cos(2*Math.PI*i)})()*this.branchAngleMax}draw(t){const{a:i,r:e,scale:h,grains:s}=this,r=[Math.cos(i+n),Math.sin(i+n)],a=[Math.cos(i-n),Math.sin(i-n)],o=t=>t*e*h,l=r.map(o),c=a.map(o),b=(i,n)=>t.fillRect(i,n,1,1),g=(t,i,n)=>{const e=Math.hypot(t,i);for(let h=0;h<=n;h++){const n=o(e*Math.random()*Math.random()-1);b(t*n,i*n)}};t.save(),t.translate(this.x*h,this.y*h),t.beginPath(),t.moveTo(...l),t.lineTo(...c),t.stroke(),t.closePath(),b(...c),g(...a,s),b(...l),g(...r,s/5),t.restore()}}const s=t=>({branchAngleExp:2,branchSplitAngle:Math.PI/4,branchSplitDiminish:.725,initBranch:1/32,mid:.5,fillStyle:"black",lineWidth:2,strokeStyle:"white",get size(){return t.width},get branchAngleMax(){return 4*Math.PI/this.size},get grains(){return Math.ceil(this.size/64)},get branchDiminish(){return this.one/32},get one(){return 1/this.size},get branchProb(){return this.one*(this.one/this.initBranch)*16}}),r=function(t){let i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(i={...s(t),...i},!t.getContext)throw new Error("Could not get canvas context");const h=t.getContext("2d");h.fillStyle=i.fillStyle,h.lineWidth=i.lineWidth,h.strokeStyle=i.strokeStyle;const r=new e(i.mid,1,i.initBranch,-n,i.one,i.one,i.size,i.grains,i.branchSplitAngle,i.branchProb,i.branchDiminish,i.branchSplitDiminish,i.branchAngleMax,i.branchAngleExp),a=()=>{r.Q.length>0&&(r.step(),r.draw(h),window.requestAnimationFrame(a))};a()};ZVTree=i})();