def getCommit() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git"
        args "rev-parse", "--short", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getBranch() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "git"
        args "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def gitLastCommitAuthor() {
    return "git log -1 --pretty=format:'%ae'".execute(null, rootDir).text.trim().replaceAll("\'", "")
}


android {
    def i = 0
    applicationVariants.all { variant ->
        println(" rootDir  = ${rootDir.absolutePath}")
        println(" buildDir =${buildDir.absolutePath}")
        i++
        println("~~~~~~~~~~~~~~~~~~~~~~~``${i}``~~~~~~~~~~~~~~~~~")
        println(variant.flavorName)
        println(variant.assemble.name)
        println(variant.versionName)
        println("~~~~~~~~~~~~~~~~~~~~~~~````~~~~~~~~~~~~~~~~~\n")

        if (variant.assemble.name.contains("Debug")) {
            // 只对 release 包生效
            return
        }

        // 打包完成后复制到的目录
        def outputFileDir = "${rootDir.absolutePath}/build/${variant.buildType.name}/${variant.versionName}"
        //确定输出文件名
        def today = new Date()
        def path = ((project.name != "app") ? project.name : rootProject.name.replace(" ", "")) + "_" +
                variant.flavorName + "_" +
                variant.buildType.name + "_" +
                variant.versionName + "_" +
                today.format('yyyy_MM_dd_HH_mm') + "_" +
                getBranch() + "_" +
                getCommit() + "_" +
                gitLastCommitAuthor() +
                ".apk"
        println("path is $path")
        variant.outputs.forEach {
            it.outputFileName = path
        }
        // 打包完成后做的一些事,复制apk到指定文件夹
        variant.assemble.doLast {
            File out = new File(outputFileDir)
            copy {
                variant.outputs.forEach { file ->
                    copy {
                        from file.outputFile
                        into out
                    }
                }
            }
        }
        def taskPrefix = "jiagu"
        def groupName = "jiagu"
        def assembleTask = variant.assemble.name
        def taskName = assembleTask.replace("assemble", taskPrefix)
        tasks.create(taskName) {
            it.group groupName
            it.dependsOn assembleTask
            variant.assemble.doLast {
                logger.error("let me do something after $assembleTask")
            }
        }
    }
}